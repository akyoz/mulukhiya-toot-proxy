doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'ハッシュタグ辞書'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 ハッシュタグ辞書
      section
        input type='search' placeholder='検索キーワード' v-model.trim='keyword' @keydown.enter='onKeyDown'
        button class='small' :disabled='!keyword' @click='search' 検索
      section :class='{"tag-entry":true, "disabled":isDisabledTag(entry.word)}' v-for='entry in result'
        h3
          | {{entry.word}}
          span class='alert' v-if='entry.short' 未使用
        nav v-if='account.username'
          button class='small' :disabled='!isDisabledTag(entry.word)' @click='setTagStatus(entry.word, true)' 有効
          button class='small' :disabled='isDisabledTag(entry.word)' @click='setTagStatus(entry.word, false)' 無効
        ul
          li
            strong パターン
            code = "/{{entry.regexp}}/"
          li
            strong タグ
            code v-for='tag in entry.tags' = "{{tag}} "
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          tags: [],
          keyword: null,
          result: {},
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {
              this.account = e.account
              this.tags = Vue.dig(e, 'config', 'tagging', 'tags', 'disabled')
            }).catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
        },
        methods: {
          onKeyDown: function () {
            if (event.keyCode == 13) {this.search()}
          },
          search: function () {
            this.result = {}
            if (this.keyword == '') {return}
            Vue.searchTags(this.keyword)
              .then(e => {this.result = e})
              .catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
          },
          isDisabledTag: function (tag) {
            this.tags = this.tags || []
            return this.tags.includes(tag)
          },
          setTagStatus: function (tag, flag) {
            const command = {tagging: {tags: {disabled: []}}}
            this.tags = this.tags || []
            if (flag) {
              this.tags = this.tags.filter(v => (v != tag))
              if (this.tags.length == 0) {this.tags = null}
            } else {
              this.tags.push(tag)
              this.tags = Array.from(new Set(this.tags))
            }
            command.tagging.tags.disabled = this.tags
            Vue.updateConfig(command)
          },
        },
      })
