doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'トークンの管理'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 トークンの管理
      nav class='tokens'
        .token
          a href='/mulukhiya/app/auth' 新しいトークンを作成して登録
          .description #{controller.display_name}でOAuth認証を行って、新しいトークンを登録します。
        - if controller.oauth_webui_uri
          .token v-if='account.is_admin'
            input placeholder='#{controller.display_name}で作成した既存のトークン' v-model.trim='input.token'
            button @click='registerToken' 登録
            .description
              a href=controller.oauth_webui_uri target='_blank' #{controller.oauth_webui_uri}
              | で作成した既存のトークンを、bin/crypt.rbで暗号化して登録してください。
              | また、以下の権限を含むものにしてください。
            .scopes 権限: #{controller.oauth_default_scopes.join(', ')}
        .token v-for='user in users'
          a href='#' @click='switchUser(user)' v-if='user.username' = '@{{user.username}}'
          span class='alert' v-else='' 認証できないトークン
          span class='role' v-if='user.is_moderator' mod
          span class='role' v-if='user.is_admin' admin
          .loggedin v-if='user.token==token' ログイン中
          i class='fas fa-trash' @click='deleteUser(user)' v-else=''
          .scopes 権限: {{user.scopes}}
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(window.VuejsDialog.main.default)
      Vue.use(MulukhiyaLib)
      new Vue({
        el: '#app',
        data: {
          message: null,
          account: {is_admin: false},
          users: [],
          tokens: [],
          token: Vue.getToken(),
          input: {
            token: null,
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {this.account = e.account})
            .catch(e => {this.message = Vue.createErrorMessage(e)})
          Vue.getUsers()
            .then(e => {this.users = e})
            .catch(e => {this.message = Vue.createErrorMessage(e)})
        },
        methods: {
          switchUser: function (user) {
            Vue.switchUser(user)
              .then(e => {
                this.account = e.account
                location.href = '/mulukhiya'
              })
          },
          registerToken: function () {
            Vue.registerToken(this.input.token)
              .then(e => Vue.getUsers())
              .then(e => {this.users = e})
              .catch(e => {this.message = e.message})
          },
          deleteUser: function (user) {
            this.$dialog.confirm(
              {
                title: 'トークンの削除',
                body: `@${user.username}のトークンを一覧から削除します。（サーバからは削除されません）`,
              },
              {okText: '削除', cancelText: 'キャンセル'}
            ).then(e => Vue.deleteToken(user.token))
            .then(e => {
              this.tokens = e
              return Vue.getUsers()
            }).then(e => {
              this.users = e
            }).catch(e => {this.message = e.message})
          },
        },
      })
