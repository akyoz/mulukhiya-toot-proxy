doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'トークンの管理'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 トークンの管理
      nav class='tokens'
        .token
          a href='/mulukhiya/app/auth' 新しいトークンを登録
        .token v-for='user in users'
          a href='#' v-on:click='switchUser(user)' = '@{{user.username}}'
          span class='loggedin' v-if='user.token==token' ログイン中
          i class='fas fa-trash' v-on:click='deleteUser(user)' v-tooltip.bottom="'トークンの削除'" v-else=''
          span class='scopes' = '権限: {{user.scopes}}'
    == slim.render 'fragment/footer'
    javascript:
      Vue.use(window.VuejsDialog.main.default)
      Vue.use(VTooltip)
      new Vue({
        el: '#app',
        data: {
          message: null,
          username: null,
          token_error: false,
          users: [],
          token: localStorage.getItem('mulukhiya_token'),
        },
        mounted: function () {
          'use strict'
          if (this.token) {
            axios.get('/mulukhiya/config?token=' + encodeURIComponent(this.token), {responseType: 'json'})
              .then(e => {
                this.username = e.data.account.username
              }).catch(e => {
                this.message = e.message
              })
            let tokens = [this.token]
            JSON.parse(localStorage.getItem('mulukhiya_all_tokens') || '[]').map(t => {
              tokens.push(t)
            })
            tokens = Array.from(new Set(tokens))
            localStorage.setItem('mulukhiya_all_tokens', JSON.stringify(tokens))
            for (let t of tokens) {
              axios.get('/mulukhiya/config?token=' + encodeURIComponent(t), {responseType: 'json'})
                .then(e => {
                  this.users.push({username: e.data.account.username, token: t, scopes: e.data.token.scopes.join(', ')})
                }).catch(e => {
                  console.error('%j', e)
                  this.token_error = true
                })
            }
          } else {
            this.token_error = true
          }
        },
        methods: {
          switchUser: function (user) {
            'use strict'
            axios.get('/mulukhiya/config?token=' + encodeURIComponent(user.token), {responseType: 'json'})
              .then(e => {
                localStorage.setItem('mulukhiya_token', user.token)
                this.username = e.data.account.username
                location.href = '/mulukhiya'
              }).catch(e => {
                this.message = e.message
              })
          },
          deleteUser: function (user) {
            'use strict'
            this.$dialog.confirm({
              title: 'トークンの削除',
              body: `@${user.username}のトークンを一覧から削除します。（サーバからは削除されません）`,
            }, {
              okText: '削除',
              cancelText: 'キャンセル',
            }).then(e => {
              const tokens = []
              const users = []
              this.users.map(u => {
                if (user.token != u.token) {
                  tokens.push(u.token)
                  users.push(u)
                }
              })
              localStorage.setItem('mulukhiya_all_tokens', JSON.stringify(tokens))
              this.users = users
            }).catch(e => {
              this.message = e.message
            })
          },
        },
      })
