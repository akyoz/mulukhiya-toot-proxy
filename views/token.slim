doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'トークンの管理'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 トークンの管理
      nav class='tokens' v-if='accounts.length'
        h3 登録済みのトークン
        .token :class='{loggedin:isLoggedIn(current_account)}' v-for='current_account in accounts'
          a href='#' @click='switchAccount(current_account)' v-if='current_account.username' = '@{{current_account.username}}'
          span class='alert' v-else='' 壊れたトークン
          span class='role' v-if='current_account.is_moderator' mod
          span class='role' v-if='current_account.is_admin' admin
          span class='role' v-if='isLoggedIn(current_account)' loggedin
          i class='fas fa-trash' @click='deleteAccount(current_account)' v-else=''
          .scopes 権限: {{current_account.scopes}}
      nav class='tokens'
        h3 トークンの登録
        .token
          | 新しいトークンを登録
          - if env.mastodon_type?
            .description #{controller.display_name}で認証を行って、新しいトークンを登録します。
            .description
              a href=params[:oauth_url] target='_blank' 認証コードを取得
              | して下の欄に入力、認証ボタンを押下してください。
            .auth-form
              input type='text' v-model.trim='input.authcode' placeholder='#{controller.display_name}の認証コード' class='code'
              button @click='authMastodon' 認証
          - if env.misskey_type?
            .description
              a href=params[:oauth_url] #{controller.display_name}の認証ページ
              | で認証を行って、新しいトークンを登録します。
        - if controller.oauth_webui_uri
          .token v-if='account.is_admin'
            | 既存のトークンを登録
            .description
              a href=controller.oauth_webui_uri target='_blank' #{controller.oauth_webui_uri}
              | で作成した既存のトークンを、bin/crypt.rbで暗号化して登録してください。
              | また、以下の権限を含むものにしてください。
            .scopes 権限: #{controller.oauth_default_scopes.join(', ')}
            input placeholder='#{controller.display_name}で作成した既存のトークン' v-model.trim='input.token'
            button @click='registerToken' 登録
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          accounts: [],
          tokens: [],
          token: Vue.getToken(),
          input: {
            authcode: null,
            token: null,
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {this.account = e.account})
            .then(e => Vue.getAccounts())
            .then(e => {this.accounts = e})
            .catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
        },
        methods: {
          switchAccount: function (account) {
            Vue.switchAccount(account)
              .then(e => {
                this.account = account
                this.token = account.token
              }).catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
          },
          registerToken: function () {
            Vue.registerToken(this.input.token)
              .then(e => {
                this.account =e
                return Vue.getAccounts()
              }).then(e => {
                this.accounts = e
                this.input.token = null
              }).catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
          },
          deleteAccount: function (account) {
            this.$dialog.confirm({body: `@${account.username}のトークンを一覧から削除します。（サーバからは削除されません）`}, {okText: '削除'})
              .then(e => Vue.deleteToken(account.token))
              .then(e => {
                this.tokens = e
                return Vue.getAccounts()
              }).then(e => this.accounts = e)
              .catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
          },
          authMastodon: function () {
            Vue.authMastodon(this.input.authcode)
              .then(e => {
                this.input.authcode = null
                this.token = e.access_token_crypt
                return Vue.registerToken(this.token)
              }).then(e => {
                Vue.setToken(this.token)
                this.account = e
                return Vue.getAccounts()
              }).then(e => {this.accounts = e})
              .catch(e => this.$dialog.alert(Vue.createErrorMessage(e)))
          },
          isLoggedIn: function (account) {
            return account.token == this.token
          }
        },
      })
