doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: '環境設定'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='username'
        h3 現在の設定
        .result-container
          pre = '{{result}}'
      section class='config' v-if='username'
        h3 @click='toggleVisibility("tags")' 固定タグ
        vue-slide-up-down :active='layout.details.tags'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model.trim='tags'
            v-select :options='options.program' @input='changeTags' v-model='program'
          .field-update-button-container
            button @click='updateTags' 更新
      section class='config' v-if='username && layout.sections.livecure'
        h3 @click='toggleVisibility("livecure")' = "実況#{controller.status_label}"
        vue-slide-up-down :active='layout.details.livecure'
          .inline-field-container
            label
              input type='checkbox' v-model='livecure' = "実況#{controller.status_label}を隠す"
          .field-update-button-container
            button @click='updateLivecure' 更新
      section class='config' v-if='username && layout.sections.growi'
        h3 @click='toggleVisibility("growi")' GROWI
        vue-slide-up-down :active='layout.details.growi'
          ol
            li
              | GROWIのアカウントをお持ちでなければ、
              a href='https://growi.cloud/' target='_blank' GROWI.cloud
              | で新しいGROWIサーバを登録してください。
              br
              | フリープランもあります。サーバを登録する手順の中で、新しいユーザーが作成できます。
            li
              | GROWIサーバのURLと、APIトークンを下の欄に入力してください。
              br
              | APIトークンは、ユーザー設定画面（画面右上のユーザーアイコンをクリック）から作成できます。
            li
              | 必要ならば
              code = "/user/{{username}}/draft"
              | 等、記事作成先を入力してください。
              br
              | 空欄の場合は
              code = "/mulukhiya/user/{{username}}"
              | に記事が作成されます。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='GROWIのAPIトークン' v-model.trim='growi_token'
          .inline-field-container
            h4 URL
            input placeholder='GROWIのルートURL' v-model.trim='growi_url'
          .inline-field-container
            h4 記事作成先
            input placeholder='記事作成先のパス' v-model.trim='growi_prefix'
          .field-update-button-container
            button @click='updateGrowi' 更新
      section class='config' v-if='username && layout.sections.dropbox'
        h3 @click='toggleVisibility("dropbox")' Dropbox
        vue-slide-up-down :active='layout.details.dropbox'
          ol
            li
              | Dropboxの開発者向けページで、
              a href='https://www.dropbox.com/developers/apps' target='_blank' アプリケーション登録
              | を行ってください。
            li アクセストークンを取得して、下の欄に入力してください。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='Dropboxのアクセストークン' v-model.trim='dropbox_token'
          .field-update-button-container
            button @click='updateDropbox' 更新
      section class='config' v-if='username && layout.sections.twitter'
        h3 @click='toggleVisibility("twitter")' Twitter
        vue-slide-up-down :active='layout.details.twitter'
          .field-update-button-container
            a :href='hrefs.twitter'
              img src='/mulukhiya/sign_in_twitter.png'
            button class='alert' @click='unauthTwitter' 認証を解除
      section class='config' v-if='username && layout.sections.annict'
        h3 @click='toggleVisibility("annict")' Annict
        vue-slide-up-down :active='layout.details.annict'
          ol
            li
              | アカウントを持っていない場合は、
              a href='https://annict.jp/sign_up' target='_blank' ユーザー登録
              | を行ってください。
            li
              a href=annict.oauth_uri target='_blank' 認証コードを取得
              | して、下の欄に入力してください。
            li 認証ボタンを押下。
          .inline-field-container
            h4 認証コード
            input placeholder='Annictの認証コード' v-model.trim='annict_auth_code'
          .field-update-button-container
            button @click='authAnnict' 認証
            button class='alert' @click='unauthAnnict' 認証を解除
      section class='config' v-if='username'
        h3 @click='toggleVisibility("webhook")' Slack互換webhook
        vue-slide-up-down :active='layout.details.webhook'
          .inline-field-container
            h4 トークン
            input placeholder='webhookのアクセストークン' v-model.trim='webhook_token'
          .inline-field-container
            h4 公開範囲
            v-select :options='options.visibility' v-model='visibility'
          .field-update-button-container
            button @click='updateWebhook' 更新
          .field-container v-if='webhook_url'
            h4 URL
            textarea ref='webhook_url_text' = '{{webhook_url}}'
            i class='fas fa-clipboard' @click='copyWebhookURL' v-tooltip.bottom="'クリップボードにコピー'"
            .alert このURLを公開してはいけません。パスワードと同じと思って、厳重に管理してください。
          .field-container v-if='webhook_url'
            h4 curlサンプル
            textarea ref='curl_sample_text' v-html='curl_sample'
            i class='fas fa-clipboard' @click='copyCurlSample' v-tooltip.bottom="'クリップボードにコピー'"
      section class='config' v-if='username'
        h3 @click='toggleVisibility("notify")' 通知
        vue-slide-up-down :active='layout.details.notify'
          .inline-field-container
            label
              input type='checkbox' v-model='notify_user_config' 設定変更を通知
            label class='alert'
              input type='checkbox' v-model='notify_verbose' 冗長な通知（管理者・開発者向け）
          .field-update-button-container
            button @click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(VTooltip)
      Vue.use(window.VuejsDialog.main.default)
      Vue.component('vue-slide-up-down', VueSlideUpDown)
      Vue.component('v-select', VueSelect.VueSelect)
      new Vue({
        el: '#app',
        data: {
          message: null,
          username: null,
          token_error: false,
          result: null,
          notify_user_config: null,
          notify_verbose: null,
          livecure: false,
          annict_auth_code: null,
          programs: [],
          program: null,
          visibility: 'public',
          curl_sample: null,
          tags: [],
          options: {
            program: [{label: '全てのタグを削除', code: 'clear'}],
            visibility: [],
          },
          layout: {
            sections: {
              livecure: #{controller.livecure?},
              growi: #{controller.growi?},
              dropbox: #{controller.dropbox?},
              twitter: #{controller.twitter?},
              annict: #{controller.annict?},
            },
            details: {
              growi: false,
              dropbox: false,
              tags: false,
              livecure: false,
              webhook: false,
              notify: false,
              twitter: false,
              annict: false,
            },
          },
          hrefs: {
            twitter: '/auth/twitter?token=' + encodeURIComponent(localStorage.getItem('mulukhiya_token')),
          },
          token: localStorage.getItem('mulukhiya_token'),
        },
        mounted: function () {
          if (this.token) {
            const href = '/mulukhiya/config?token=' + encodeURIComponent(this.token)
            axios.get(href, {responseType: 'json'})
              .then(e => {
                this.result = jsyaml.safeDump(e.data.config)
                if (e.data.config.webhook) {
                  this.webhook_token = e.data.config.webhook.token
                  this.webhook_url = e.data.config.webhook.url
                  this.visibility = e.data.config.webhook.visibility || 'public'
                  this.curl_sample = String.raw`curl -H 'Content-Type: application/json' -X POST -d '{"text":"#{config['/webhook/sample'].strip.gsub(/\n/,'\n')}"}' ${e.data.config.webhook.url}`
                }
                if (e.data.config.tags) {
                  this.tags = e.data.config.tags.join("\n")
                }
                if (e.data.config.growi) {
                  this.growi_token = e.data.config.growi.token
                  this.growi_url = e.data.config.growi.url
                  this.growi_prefix = e.data.config.growi.prefix
                }
                if (e.data.config.dropbox) {
                  this.dropbox_token = e.data.config.dropbox.token
                }
                if (e.data.config.notify) {
                  this.notify_user_config = e.data.config.notify.user_config ? 1 : 0
                  this.notify_verbose = e.data.config.notify.verbose ? 1 : 0
                }
                if (Array.isArray(e.data.filters)) {
                  e.data.filters.map(f => {
                    if (f.phrase == '#実況') {
                      this.livecure = true
                    }
                  })
                }
                Object.keys(e.data.visibility_names).map(k => {
                  const v = e.data.visibility_names[k]
                  this.options.visibility.push({
                    label: k == v ? k : `${v} (${k})`,
                    code: v,
                  })
                })
                this.username = e.data.account.username
              }).catch(e => {
                this.message = e.response.data.error || e.message
                this.token_error = true
              })
          } else {
            this.token_error = true
          }
          axios.get('/mulukhiya/programs', {responseType: 'json'})
            .then(e => {
              this.programs = e.data
              Object.values(this.programs).map(program => {
                if (program.enable) {
                  const label = [program.series]
                  if (program.episode) {
                    label.push(`${program.episode}話`)
                  }
                  if (program.air) {
                    label.push('エア番組')
                  }
                  if (program.extra_tags) {
                    program.extra_tags.map(tag => {
                      label.push(tag)
                    })
                  }
                  this.options.program.push({label: label.join(' '), code: program.key})
                }
              })
            }).catch(e => {
              this.message = e.response.data.error || e.message
            })
        },
        methods: {
          updateConfig: function (values, command) {
            values.status = JSON.stringify(command)
            values.text = JSON.stringify(command)
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/config', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.result = jsyaml.safeDump(e.data.config)
                this.message = null
                this.webhook_url = e.data.config.webhook.url
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          copyWebhookURL: function () {
            this.$refs.webhook_url_text.select()
            document.execCommand('copy')
          },
          copyCurlSample: function () {
            this.$refs.curl_sample_text.select()
            document.execCommand('copy')
          },
          changeTags: function (e) {
            const program = this.programs[e.code]
            if (program) {
              const tags = ['実況', program.series]
              if (program.episode) {
                tags.push(`${program.episode}話`)
              }
              if (program.air) {
                tags.push('エア番組')
              }
              if (program.extra_tags) {
                program.extra_tags.map(tag => {
                  tags.push(tag)
                })
              }
              this.tags = tags.join("\n")
            } else {
              this.tags = ''
            }
          },
          toggleVisibility: function (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          updateGrowi: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', growi: {url: null, token: null, prefix: null}}
            if (this.growi_token) {
              command.growi.token = this.growi_token
            }
            if (this.growi_url) {
              command.growi.url = this.growi_url
            }
            if (this.growi_prefix) {
              command.growi.prefix = this.growi_prefix
            }
            this.updateConfig(values, command)
          },
          updateDropbox: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', dropbox: {token: null}}
            if (this.dropbox_token) {
              command.dropbox.token = this.dropbox_token
            }
            this.updateConfig(values, command)
          },
          updateTags: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', tags: null}
            if (this.tags) {
              command.tags = this.tags.split("\n")
            }
            this.updateConfig(values, command)
          },
          updateLivecure: function () {
            const command = {command: 'filter', tag: '実況'}
            if (this.livecure) {
              command.action = 'register'
            } else {
              command.action = 'unregister'
            }
            const values = {
              token: localStorage.getItem('mulukhiya_token'),
              status: JSON.stringify(command),
              text: JSON.stringify(command),
            }
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/filter', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.message = null
                this.layout.details.livecure = false
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          updateWebhook: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', webhook: {token: null, visibility: null}}
            if (this.webhook_token) {
              command.webhook.token = this.webhook_token
              if (this.visibility.code != 'public') {
                command.webhook.visibility = this.visibility.code
              }
            }
            this.updateConfig(values, command)
          },
          updateNotify: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', notify: {verbose: null, user_config: null}}
            if (this.notify_verbose) {
              command.notify.verbose = true
            }
            if (this.notify_user_config) {
              command.notify.user_config = true
            }
            this.updateConfig(values, command)
          },
          unauthTwitter: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', twitter: null}
            this.$dialog.confirm({
              title: '認証の解除',
              body: 'Twitterのトークンを削除します。',
            }, {
              okText: '削除',
              cancelText: 'キャンセル',
            }).then(e => {
              this.updateConfig(values, command)
            }).catch(e => {
              this.message = e.response.data.error || e.message
            })
          },
          authAnnict: function () {
            const values = {
              token: localStorage.getItem('mulukhiya_token'),
              code: this.annict_auth_code,
            }
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/annict/auth', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.result = jsyaml.safeDump(e.data.config)
                this.message = null
                this.annict_auth_code = null
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          unauthAnnict: function () {
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', annict: null}
            this.$dialog.confirm({
              title: '認証の解除',
              body: 'Annictのトークンを削除します。',
            }, {
              okText: '削除',
              cancelText: 'キャンセル',
            }).then(e => {
              this.updateConfig(values, command)
            }).catch(e => {
              this.message = e.response.data.error || e.message
            })
          },
        },
      })
