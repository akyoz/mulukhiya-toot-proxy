doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: '環境設定'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='username'
        h3 現在の設定
        #result-container
          pre = '{{result}}'
      section class='config' v-if='username'
        h3 v-on:click='toggleGrowiSection' GROWI
        .section-contents v-show='show_growi_detail'
          .inline-field-container
            h4 トークン
            input placeholder='GROWIのアクセストークン' v-model='growi_token' maxlength='256'
          .inline-field-container
            h4 URL
            input placeholder='GROWIのルートURL' v-model='growi_url' maxlength='256'
          .field-update-button-container
            button v-on:click='updateGrowi' 更新
      section class='config' v-if='username'
        h3 v-on:click='toggleDropboxSection' Dropbox
        .section-contents v-show='show_dropbox_detail'
          .inline-field-container
            h4 トークン
            input placeholder='Dropboxのアクセストークン' v-model='dropbox_token' maxlength='256'
          .field-update-button-container
            button v-on:click='updateDropbox' 更新
      section class='config' v-if='username'
        h3 v-on:click='toggleTagsSection' 固定タグ
        .section-contents v-show='show_tags_detail'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model='tags'
            v-select :options='program_options' v-on:input='changeTags' v-model='program'
          .field-update-button-container
            button v-on:click='updateTags' 更新
      section class='config' v-if='username' v-show='show_livecure'
        h3 v-on:click='toggleLivecureSection' = "実況#{status_label}"
        .section-contents v-show='show_livecure_detail'
          .field-container
            v-select :options='livecure_options' v-model='livecure'
          .field-update-button-container
            button v-on:click='updateLivecure' 更新
      section class='config' v-if='username'
        h3 v-on:click='toggleWebhookSection' Slack互換webhook
        .section-contents v-show='show_webhook_detail'
          .inline-field-container
            h4 トークン
            input placeholder='webhookのアクセストークン' v-model='webhook_token' maxlength='256'
          .field-update-button-container
            button v-on:click='updateWebhook' 更新
          .field-container v-if='webhook_url'
            h4 URL
            textarea id='webhook-url-text' = '{{webhook_url}}'
            i class='fas fa-clipboard' v-on:click='copyWebhookURL'
          .field-container v-if='webhook_url'
            h4 curlサンプル
            textarea id='curl-sample-text' = '{{curl_sample}}'
            i class='fas fa-clipboard' v-on:click='copyCurlSample'
      section class='config' v-if='username'
        h3 v-on:click='toggleNotifySection' 通知
        .section-contents v-show='show_notify_detail'
          .inline-field-container
            label class='alert'
              input type='checkbox' value='1' v-model='notify_verbose'
              | 冗長な通知を行う（管理者・開発者向け）
          .field-update-button-container
            button v-on:click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      Vue.component('v-select', VueSelect.VueSelect)
      new Vue({
        el: '#app',
        data: {
          message: null,
          username: null,
          token_error: false,
          result: null,
          notify_verbose: null,
          programs: [],
          program_options: [],
          program: null,
          livecure_options: [
            {label: '表示', code: 'unregister'},
            {label: '非表示', code: 'register'},
          ],
          livecure: '表示',
          show_livecure: #{livecure.to_s},
          show_growi_detail: false,
          show_dropbox_detail: false,
          show_tags_detail: false,
          show_livecure_detail: false,
          show_webhook_detail: false,
          show_notify_detail: false,
        },
        mounted: function () {
          'use strict'
          const token = localStorage.getItem('mulukhiya_token')
          if (token) {
            const href = '/mulukhiya/config?token=' + encodeURIComponent(token)
            axios.get(href, {responseType: 'json'})
              .then(e => {
                this.result = jsyaml.safeDump(e.data.config)
                if (e.data.config.webhook) {
                  this.webhook_token = e.data.config.webhook.token
                  this.webhook_url = e.data.config.webhook.url
                  this.curl_sample = `curl -H 'Content-Type: application/json' -X POST -d '{"text":"わたしが斬るのは、あなたじゃない！\\n絶ち切るのは弱さ。切り拓くは未来。心を貫く勇気の刃。\\nそれがわたし。王女様からもらった名前、キュアソードよ！"}' ${e.data.config.webhook.url}`
                }
                if (e.data.config.tags) {
                  this.tags = e.data.config.tags.join("\n")
                }
                if (e.data.config.growi) {
                  this.growi_token = e.data.config.growi.token
                  this.growi_url = e.data.config.growi.url
                }
                if (e.data.config.dropbox) {
                  this.dropbox_token = e.data.config.dropbox.token
                }
                if (e.data.config.notify) {
                  this.notify_verbose = e.data.config.notify.verbose ? 1 : 0
                }
                if (Array.isArray(e.data.filters)) {
                  e.data.filters.map(f => {
                    if (f.phrase == '#実況') {
                      this.livecure = '非表示'
                    }
                  })
                }
                this.username = e.data.account.username
              }).catch(e => {
                this.message = e.message
              })
          } else {
            this.token_error = true
          }
          const href = '/mulukhiya/programs'
          axios.get(href, {responseType: 'json'})
            .then(e => {
              this.programs = e.data
              Object.values(this.programs).map(program => {
                if (program.enable) {
                  const label = [program.series]
                  if (program.episode) {
                    label.push(program.episode + '話')
                  }
                  if (program.air) {
                    label.push('エア番組')
                  }
                  this.program_options.push({label: label.join(' '), code: program.key})
                }
              })
            }).catch(e => {
              this.message = e.message
            })
        },
        methods: {
          updateConfig: function (values, command) {
            values.status = JSON.stringify(command)
            values.text = JSON.stringify(command)
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/config', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.result = jsyaml.safeDump(e.data.config)
                this.message = null
                this.webhook_url = e.data.config.webhook.url
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          copyWebhookURL: function () {
            'use strict'
            document.getElementById('webhook-url-text').select()
            document.execCommand('copy')
          },
          copyCurlSample: function () {
            'use strict'
            document.getElementById('curl-sample-text').select()
            document.execCommand('copy')
          },
          changeTags: function (e) {
            'use strict'
            const program = this.programs[e.code]
            if (program) {
              const tags = ['実況', program.series]
              if (program.episode) {
                tags.push(program.episode + '話')
              }
              if (program.air) {
                tags.push('エア番組')
              }
              if (program.extra_tags) {
                program.extra_tags.map(tag => {
                  tags.push(tag)
                })
              }
              this.tags = tags.join("\n")
            }
          },
          toggleGrowiSection: function () {
            'use strict'
            this.show_growi_detail = !this.show_growi_detail
          },
          toggleDropboxSection: function () {
            'use strict'
            this.show_dropbox_detail = !this.show_dropbox_detail
          },
          toggleTagsSection: function () {
            'use strict'
            this.show_tags_detail = !this.show_tags_detail
          },
          toggleLivecureSection: function () {
            'use strict'
            this.show_livecure_detail = !this.show_livecure_detail
          },
          toggleWebhookSection: function () {
            'use strict'
            this.show_webhook_detail = !this.show_webhook_detail
          },
          toggleNotifySection: function () {
            'use strict'
            this.show_notify_detail = !this.show_notify_detail
          },
          updateGrowi: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', growi: {url: null, token: null}}
            if (this.growi_url) {
              command.growi.url = this.growi_url
            }
            if (this.growi_token) {
              command.growi.token = this.growi_token
            }
            this.updateConfig(values, command)
          },
          updateDropbox: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', dropbox: {token: null}}
            if (this.dropbox_token) {
              command.dropbox.token = this.dropbox_token
            }
            this.updateConfig(values, command)
          },
          updateTags: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', tags: null}
            if (this.tags) {
              command.tags = this.tags.split("\n")
            }
            this.updateConfig(values, command)
          },
          updateLivecure: function () {
            'use strict'
            const command = {command: 'filter', tag: '実況', action: this.livecure.code}
            const values = {
              token: localStorage.getItem('mulukhiya_token'),
              status: JSON.stringify(command),
              text: JSON.stringify(command),
            }
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/filter', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.message = null
                this.show_livecure_detail = false
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          updateWebhook: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', webhook: {token: null}}
            if (this.webhook_token) {
              command.webhook.token = this.webhook_token
            }
            this.updateConfig(values, command)
          },
          updateNotify: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', notify: null}
            if (this.notify_verbose) {
              command.notify = {verbose: true}
            }
            this.updateConfig(values, command)
          },
        },
      })
