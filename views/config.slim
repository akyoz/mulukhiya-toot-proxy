doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: '環境設定'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='username'
        h3 現在の設定
        #result-container
          pre = '{{result}}'
      section class='config' v-if='username && show_growi'
        h3 v-on:click='toggleGrowiSection' GROWI
        .section-contents v-show='show_growi_detail'
          .inline-field-container
            h4 トークン
            input placeholder='GROWIのアクセストークン' v-model='growi_token' maxlength='256'
          .inline-field-container
            h4 URL
            input placeholder='GROWIのルートURL' v-model='growi_url' maxlength='256'
          .field-update-button-container
            button v-on:click='updateGrowi' 更新
      section class='config' v-if='username && show_dropbox'
        h3 v-on:click='toggleDropboxSection' Dropbox
        .section-contents v-show='show_dropbox_detail'
          .inline-field-container
            h4 トークン
            input placeholder='Dropboxのアクセストークン' v-model='dropbox_token' maxlength='256'
          .field-update-button-container
            button v-on:click='updateDropbox' 更新
      section class='config' v-if='username'
        h3 v-on:click='toggleTagsSection' 固定タグ
        .section-contents v-show='show_tags_detail'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model='tags'
            v-select :options='program_options' v-on:input='changeTags' v-model='program'
          .field-update-button-container
            button v-on:click='updateTags' 更新
      section class='config' v-if='username && show_livecure'
        h3 v-on:click='toggleLivecureSection' = "実況#{controller.status_label}"
        .section-contents v-show='show_livecure_detail'
          .inline-field-container
            label
              input type='checkbox' value='1' v-model='livecure' = "実況#{controller.status_label}を隠す"
          .field-update-button-container
            button v-on:click='updateLivecure' 更新
      section class='config' v-if='username && show_twitter'
        h3 v-on:click='toggleTwitterSection' Twitter
        .section-contents v-show='show_twitter_detail'
          .field-update-button-container
            a :href='twitterHref'
              img src='/mulukhiya/sign_in_twitter.png'
            button class='alert' v-on:click='unauthTwitter' 認証を解除
      section class='config' v-if='username && show_annict'
        h3 v-on:click='toggleAnnictSection' Annict
        .section-contents v-show='show_annict_detail'
          ol
            li
              | アカウントを持っていない場合は、
              a href='https://annict.jp/sign_up' target='_blank' ユーザー登録
              | を行ってください。
            li
              a href=annict.oauth_uri target='_blank' 認証コードを取得
              | して、下の欄に入力してください。
            li 認証ボタンを押下。
          .inline-field-container
            h4 認証コード
            input placeholder='Annictの認証コード' v-model='annict_auth_code' maxlength='256'
          .field-update-button-container
            button v-on:click='authAnnict' 認証
            button class='alert' v-on:click='unauthAnnict' 認証を解除
      section class='config' v-if='username'
        h3 v-on:click='toggleWebhookSection' Slack互換webhook
        .section-contents v-show='show_webhook_detail'
          .inline-field-container
            h4 トークン
            input placeholder='webhookのアクセストークン' v-model='webhook_token' maxlength='256'
          .inline-field-container
            h4 公開範囲
            v-select :options='visibility_options' v-model='visibility'
          .field-update-button-container
            button v-on:click='updateWebhook' 更新
          .field-container v-if='webhook_url'
            h4 URL
            textarea id='webhook-url-text' = '{{webhook_url}}'
            i class='fas fa-clipboard' v-on:click='copyWebhookURL' v-tooltip.bottom="'クリップボードにコピー'"
            .alert このURLを公開してはいけません。パスワードと同じと思って、厳重に管理してください。
          .field-container v-if='webhook_url'
            h4 curlサンプル
            textarea id='curl-sample-text' v-html='curl_sample'
            i class='fas fa-clipboard' v-on:click='copyCurlSample' v-tooltip.bottom="'クリップボードにコピー'"
      section class='config' v-if='username'
        h3 v-on:click='toggleNotifySection' 通知
        .section-contents v-show='show_notify_detail'
          .inline-field-container
            label
              input type='checkbox' value='1' v-model='notify_user_config' 設定変更を通知
            label class='alert'
              input type='checkbox' value='1' v-model='notify_verbose' 冗長な通知（管理者・開発者向け）
          .field-update-button-container
            button v-on:click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      Vue.use(VTooltip)
      Vue.use(window.VuejsDialog.main.default)
      Vue.component('v-select', VueSelect.VueSelect)
      new Vue({
        el: '#app',
        data: {
          message: null,
          username: null,
          token_error: false,
          result: null,
          notify_user_config: null,
          notify_verbose: null,
          livecure: false,
          annict_auth_code: null,
          programs: [],
          program_options: [{label: '全てのタグを削除', code: 'clear'}],
          program: null,
          visibility_options: [],
          visibility: 'public',
          curl_sample: null,
          show_livecure: #{controller.livecure?},
          show_growi: #{controller.clipping?},
          show_dropbox: #{controller.clipping?},
          show_twitter: #{controller.twitter?},
          show_annict: #{controller.annict?},
          show_growi_detail: false,
          show_dropbox_detail: false,
          show_tags_detail: false,
          show_livecure_detail: false,
          show_webhook_detail: false,
          show_notify_detail: false,
          show_twitter_detail: false,
          show_annict_detail: false,
        },
        computed: {
          twitterHref: function () {
            return '/auth/twitter?token=' + encodeURIComponent(localStorage.getItem('mulukhiya_token'))
          },
        },
        mounted: function () {
          'use strict'
          const token = localStorage.getItem('mulukhiya_token')
          if (token) {
            const href = '/mulukhiya/config?token=' + encodeURIComponent(token)
            axios.get(href, {responseType: 'json'})
              .then(e => {
                this.result = jsyaml.safeDump(e.data.config)
                if (e.data.config.webhook) {
                  this.webhook_token = e.data.config.webhook.token
                  this.webhook_url = e.data.config.webhook.url
                  this.visibility = e.data.config.webhook.visibility || 'public'
                  this.curl_sample = String.raw`curl -H 'Content-Type: application/json' -X POST -d '{"text":"#{config['/webhook/sample'].strip.gsub(/\n/,'\n')}"}' ${e.data.config.webhook.url}`
                }
                if (e.data.config.tags) {
                  this.tags = e.data.config.tags.join("\n")
                }
                if (e.data.config.growi) {
                  this.growi_token = e.data.config.growi.token
                  this.growi_url = e.data.config.growi.url
                }
                if (e.data.config.dropbox) {
                  this.dropbox_token = e.data.config.dropbox.token
                }
                if (e.data.config.notify) {
                  this.notify_user_config = e.data.config.notify.user_config ? 1 : 0
                  this.notify_verbose = e.data.config.notify.verbose ? 1 : 0
                }
                if (Array.isArray(e.data.filters)) {
                  e.data.filters.map(f => {
                    if (f.phrase == '#実況') {
                      this.livecure = true
                    }
                  })
                }
                Object.keys(e.data.visibility_names).map(k => {
                  const v = e.data.visibility_names[k]
                  this.visibility_options.push({
                    label: k == v ? k : `${v} (${k})`,
                    code: v,
                  })
                })
                this.username = e.data.account.username
              }).catch(e => {
                this.message = e.message
                this.token_error = true
              })
          } else {
            this.token_error = true
          }
          const href = '/mulukhiya/programs'
          axios.get(href, {responseType: 'json'})
            .then(e => {
              this.programs = e.data
              Object.values(this.programs).map(program => {
                if (program.enable) {
                  const label = [program.series]
                  if (program.episode) {
                    label.push(program.episode + '話')
                  }
                  if (program.air) {
                    label.push('エア番組')
                  }
                  if (program.extra_tags) {
                    program.extra_tags.map(tag => {
                      label.push(tag)
                    })
                  }
                  this.program_options.push({label: label.join(' '), code: program.key})
                }
              })
            }).catch(e => {
              this.message = e.message
            })
        },
        methods: {
          updateConfig: function (values, command) {
            'use strict'
            values.status = JSON.stringify(command)
            values.text = JSON.stringify(command)
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/config', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.result = jsyaml.safeDump(e.data.config)
                this.message = null
                this.webhook_url = e.data.config.webhook.url
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          copyWebhookURL: function () {
            'use strict'
            document.getElementById('webhook-url-text').select()
            document.execCommand('copy')
          },
          copyCurlSample: function () {
            'use strict'
            document.getElementById('curl-sample-text').select()
            document.execCommand('copy')
          },
          changeTags: function (e) {
            'use strict'
            const program = this.programs[e.code]
            if (program) {
              const tags = ['実況', program.series]
              if (program.episode) {
                tags.push(program.episode + '話')
              }
              if (program.air) {
                tags.push('エア番組')
              }
              if (program.extra_tags) {
                program.extra_tags.map(tag => {
                  tags.push(tag)
                })
              }
              this.tags = tags.join("\n")
            } else {
              this.tags = ''
            }
          },
          toggleGrowiSection: function () {
            'use strict'
            this.show_growi_detail = !this.show_growi_detail
          },
          toggleDropboxSection: function () {
            'use strict'
            this.show_dropbox_detail = !this.show_dropbox_detail
          },
          toggleTagsSection: function () {
            'use strict'
            this.show_tags_detail = !this.show_tags_detail
          },
          toggleLivecureSection: function () {
            'use strict'
            this.show_livecure_detail = !this.show_livecure_detail
          },
          toggleWebhookSection: function () {
            'use strict'
            this.show_webhook_detail = !this.show_webhook_detail
          },
          toggleNotifySection: function () {
            'use strict'
            this.show_notify_detail = !this.show_notify_detail
          },
          toggleTwitterSection: function () {
            'use strict'
            this.show_twitter_detail = !this.show_twitter_detail
          },
          toggleAnnictSection: function () {
            'use strict'
            this.show_annict_detail = !this.show_annict_detail
          },
          updateGrowi: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', growi: {url: null, token: null}}
            if (this.growi_url) {
              command.growi.url = this.growi_url
            }
            if (this.growi_token) {
              command.growi.token = this.growi_token
            }
            this.updateConfig(values, command)
          },
          updateDropbox: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', dropbox: {token: null}}
            if (this.dropbox_token) {
              command.dropbox.token = this.dropbox_token
            }
            this.updateConfig(values, command)
          },
          updateTags: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', tags: null}
            if (this.tags) {
              command.tags = this.tags.split("\n")
            }
            this.updateConfig(values, command)
          },
          updateLivecure: function () {
            'use strict'
            const command = {command: 'filter', tag: '実況'}
            if (this.livecure) {
              command.action = 'register'
            } else {
              command.action = 'unregister'
            }
            const values = {
              token: localStorage.getItem('mulukhiya_token'),
              status: JSON.stringify(command),
              text: JSON.stringify(command),
            }
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/filter', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.message = null
                this.show_livecure_detail = false
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          updateWebhook: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', webhook: {token: null, visibility: null}}
            if (this.webhook_token) {
              command.webhook.token = this.webhook_token
              if (this.visibility.code != 'public') {
                command.webhook.visibility = this.visibility.code
              }
            }
            this.updateConfig(values, command)
          },
          updateNotify: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', notify: {verbose: null, user_config: null}}
            if (this.notify_verbose) {
              command.notify.verbose = true
            }
            if (this.notify_user_config) {
              command.notify.user_config = true
            }
            this.updateConfig(values, command)
          },
          unauthTwitter: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', twitter: null}
            this.$dialog.confirm({
              title: '認証の解除',
              body: 'Twitterのトークンを削除します。',
            }, {
              okText: '削除',
              cancelText: 'キャンセル',
            }).then(e => {
              this.updateConfig(values, command)
            }).catch(e => {
              this.message = e.message
            })
          },
          authAnnict: function () {
            'use strict'
            const values = {
              token: localStorage.getItem('mulukhiya_token'),
              code: this.annict_auth_code,
            }
            document.body.style.cursor = 'wait'
            axios.post('/mulukhiya/annict/auth', values)
              .then(e => {
                document.body.style.cursor = 'auto'
                this.result = jsyaml.safeDump(e.data.config)
                this.message = null
                this.annict_auth_code = null
              }).catch(e => {
                document.body.style.cursor = 'auto'
                this.message = e.response.data.error || e.message
              })
          },
          unauthAnnict: function () {
            'use strict'
            const values = {token: localStorage.getItem('mulukhiya_token')}
            const command = {command: 'user_config', annict: null}
            this.$dialog.confirm({
              title: '認証の解除',
              body: 'Annictのトークンを削除します。',
            }, {
              okText: '削除',
              cancelText: 'キャンセル',
            }).then(e => {
              this.updateConfig(values, command)
            }).catch(e => {
              this.message = e.message
            })
          },
        },
      })
