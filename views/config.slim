doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: '環境設定'}
    main id='app' class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='account.username'
        h3 現在の設定
        .result-container
          pre = '{{result}}'
      section class='config' v-if='account.username'
        h3 @click='toggleVisibility("tags")' 固定タグ
        vue-slide-up-down :active='layout.details.tags'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model.trim='form.tags'
            v-select :options='options.program' @input='onChangeTags' v-model='form.program'
          .field-update-button-container
            button @click='updateTags' 更新
      section class='config' v-if='account.username && layout.sections.livecure'
        h3 @click='toggleVisibility("livecure")' = "実況#{controller.status_label}"
        vue-slide-up-down :active='layout.details.livecure'
          .inline-field-container
            label
              input type='checkbox' v-model='form.livecure' = "実況#{controller.status_label}を隠す"
          .field-update-button-container
            button @click='updateLivecure' 更新
      section class='config' v-if='account.username && layout.sections.growi'
        h3 @click='toggleVisibility("growi")' GROWI
        vue-slide-up-down :active='layout.details.growi'
          ol
            li
              | GROWIのアカウントをお持ちでなければ、
              a href='https://growi.cloud/' target='_blank' GROWI.cloud
              | で新しいGROWIサーバを登録してください。
              br
              | フリープランもあります。サーバを登録する手順の中で、新しいユーザーが作成できます。
            li
              | GROWIサーバのURLと、APIトークンを下の欄に入力してください。
              br
              | APIトークンは、ユーザー設定画面（画面右上のユーザーアイコンをクリック）から作成できます。
            li
              | 必要ならば
              code = "/user/{{account.username}}/draft"
              | 等、記事作成先を入力してください。
              br
              | 空欄の場合は
              code = "/mulukhiya/user/{{account.username}}"
              | に記事が作成されます。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='GROWIのAPIトークン' v-model.trim='form.growi.token'
          .inline-field-container
            h4 URL
            input placeholder='GROWIのルートURL' v-model.trim='form.growi.url'
          .inline-field-container
            h4 記事作成先
            input placeholder='記事作成先のパス' v-model.trim='form.growi.prefix'
          .field-update-button-container
            button @click='updateGrowi' 更新
      section class='config' v-if='account.username && layout.sections.dropbox'
        h3 @click='toggleVisibility("dropbox")' Dropbox
        vue-slide-up-down :active='layout.details.dropbox'
          ol
            li
              | Dropboxの開発者向けページで、
              a href='https://www.dropbox.com/developers/apps' target='_blank' アプリケーション登録
              | を行ってください。
            li アクセストークンを取得して、下の欄に入力してください。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='Dropboxのアクセストークン' v-model.trim='form.dropbox.token'
          .field-update-button-container
            button @click='updateDropbox' 更新
      section class='config' v-if='account.username && layout.sections.annict'
        h3 @click='toggleVisibility("annict")' Annict
        vue-slide-up-down :active='layout.details.annict'
          ol
            li
              | アカウントを持っていない場合は、
              a href='https://annict.jp/sign_up' target='_blank' ユーザー登録
              | を行ってください。
            li
              a href=annict.oauth_uri target='_blank' 認証コードを取得
              | して、下の欄に入力してください。
            li 認証ボタンを押下。
          .inline-field-container
            h4 認証コード
            input placeholder='Annictの認証コード' v-model.trim='form.annict.auth_code'
          .field-update-button-container
            button @click='authAnnict' 認証
            button class='alert' @click='unauthAnnict' 認証を解除
      section class='config' v-if='account.username'
        h3 @click='toggleVisibility("webhook")' Slack互換webhook
        vue-slide-up-down :active='layout.details.webhook'
          .inline-field-container
            h4 トークン
            input placeholder='webhookのアクセストークン' v-model.trim='form.webhook.token'
          .inline-field-container
            h4 公開範囲
            v-select :options='options.visibility' v-model='form.webhook.visibility'
          .field-update-button-container
            button @click='updateWebhook' 更新
          .field-container v-if='form.webhook.url'
            h4 URL
            textarea ref='webhook_url_text' = '{{form.webhook.url}}'
            i class='fas fa-clipboard' @click='copyWebhookURL'
            .alert このURLを公開してはいけません。パスワードと同じと思って、厳重に管理してください。
          .field-container v-if='form.webhook.url'
            h4 curlサンプル
            textarea ref='curl_sample_text' v-html='form.webhook.curl_sample'
            i class='fas fa-clipboard' @click='copyCurlSample'
      section class='config' v-if='account.username'
        h3 @click='toggleVisibility("notify")' 通知
        vue-slide-up-down :active='layout.details.notify'
          .inline-field-container
            label
              input type='checkbox' v-model='form.notify.user_config' 設定変更を通知
            label class='alert'
              input type='checkbox' v-model='form.notify.verbose' 冗長な通知（管理者・開発者向け）
          .field-update-button-container
            button @click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default)
      Vue.component('vue-slide-up-down', VueSlideUpDown)
      Vue.component('v-select', VueSelect.VueSelect)
      new Vue({
        el: '#app',
        data: {
          message: null,
          account: {is_admin: false, username: null},
          result: null,
          programs: [],
          form: {
            notify: {user_config: null, verbose: null},
            livecure: false,
            annict: {auth_code: null},
            program: null,
            tags: [],
            webhook: {token: null, visibility: null, url: null, curl_sample: null},
            growi: {token: null, url: null, prefix: null},
            dropbox: {token: null},
          },
          options: {
            program: [],
            visibility: [],
          },
          layout: {
            sections: {
              livecure: #{controller.livecure?},
              growi: #{controller.growi?},
              dropbox: #{controller.dropbox?},
              annict: #{controller.annict?},
            },
            details: {
              growi: false,
              dropbox: false,
              tags: false,
              livecure: false,
              webhook: false,
              notify: false,
              annict: false,
            },
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => this.updateForm(e))
            .catch(e => {this.message = Vue.createErrorMessage(e)})
          Vue.getPrograms()
            .then(e => {
              this.programs = e
              this.options.program = Object.values(e)
                .filter(program => program.enable)
                .map(p => ({code: p.key, label: Vue.createProgramTags(p).join(' ')}))
              this.options.program.unshift({label: '(固定タグのクリア)'})
            })
        },
        methods: {
          updateForm: function (data) {
            if (data.error) {return Promise.reject(data.error)}
            this.account = data.account
            this.result = jsyaml.dump(data.config)
            this.form.webhook.token = Vue.dig(data, 'config', 'webhook', 'token')
            this.form.webhook.url = Vue.dig(data, 'config', 'webhook', 'url')
            this.form.webhook.visibility = Vue.dig(data, 'config', 'webhook', 'visibility') || 'public'
            this.form.webhook.curl_sample = String.raw`curl -H 'Content-Type: application/json' -X POST -d '{"text":"#{config['/webhook/sample'].strip.gsub(/\n/,'\n')}"}' ${Vue.dig(data, 'config', 'webhook', 'url')}`
            this.form.growi.token = Vue.dig(data, 'config', 'growi', 'token')
            this.form.growi.url = Vue.dig(data, 'config', 'growi', 'url')
            this.form.growi.prefix = Vue.dig(data, 'config', 'growi', 'prefix')
            this.form.dropbox.token = Vue.dig(data, 'config', 'dropbox', 'token')
            this.form.notify.user_config = Vue.dig(data, 'config', 'notify', 'user_config') == true
            this.form.notify.verbose = Vue.dig(data, 'config', 'notify', 'verbose') == true
            if (Vue.dig(data, 'config', 'tagging', 'user_tag')) {
              this.form.tags = Vue.dig(data, 'config', 'tagging', 'user_tag').join("\n")
            }
            if (Array.isArray(data.filters)) {
              data.filters.filter(f => {f.phrase == '#実況'}).map(f => {this.form.livecure = true})
            }
            this.options.visibility = []
            Object.keys(data.visibility_names).map(k => {
              const v = data.visibility_names[k]
              this.options.visibility.push({label: k == v ? k : `${v} (${k})`, code: v})
            })
          },
          updateConfig: function (command) {
            this.message = null
            Vue.updateConfig(command)
              .then(e => this.updateForm(e))
              .catch(e => {this.message = Vue.createErrorMessage(e)})
          },
          copyWebhookURL: function () {
            this.$refs.webhook_url_text.select()
            document.execCommand('copy')
          },
          copyCurlSample: function () {
            this.$refs.curl_sample_text.select()
            document.execCommand('copy')
          },
          onChangeTags: function (e) {
            this.form.tags = Vue.createProgramTags(this.programs[e.code]).join("\n")
          },
          toggleVisibility: function (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          updateGrowi: function () {
            const command = {growi: {url: null, token: null, prefix: null}}
            if (this.form.growi.token) {command.growi.token = this.form.growi.token}
            if (this.form.growi.url) {command.growi.url = this.form.growi.url}
            if (this.form.growi.prefix) {command.growi.prefix = this.form.growi.prefix}
            this.updateConfig(command)
          },
          updateDropbox: function () {
            const command = {dropbox: {token: null}}
            if (this.form.dropbox.token) {command.dropbox.token = this.form.dropbox.token}
            this.updateConfig(command)
          },
          updateTags: function () {
            const command = {tagging: {user_tags: null}}
            if (this.form.tags) {command.tagging.user_tags = this.form.tags.split("\n")}
            this.updateConfig(command)
          },
          updateLivecure: function () {
            this.message = null
            Vue.updateLivecureFlag(this.form.livecure)
              .then(e => {this.layout.details.livecure = false})
              .catch(e => {this.message = Vue.createErrorMessage(e)})
          },
          updateWebhook: function () {
            const command = {webhook: {token: null, visibility: null}}
            if (this.form.webhook.token) {
              command.webhook.token = this.form.webhook.token
              if (this.form.webhook.visibility.code != 'public') {
                command.webhook.visibility = this.form.webhook.visibility.code
              }
            }
            this.updateConfig(command)
          },
          updateNotify: function () {
            const command = {notify: {verbose: null, user_config: null}}
            if (this.form.notify.verbose) {command.notify.verbose = true}
            if (this.form.notify.user_config) {command.notify.user_config = true}
            this.updateConfig(command)
          },
          authAnnict: function () {
            this.message = null
            Vue.authAnnict(this.form.annict.auth_code)
              .then(e => {
                this.result = jsyaml.dump(e.config)
                this.form.annict.auth_code = null
                this.layout.details.annict = false
              }).catch(e => {this.message = Vue.createErrorMessage(e)})
          },
          unauthAnnict: function () {
            this.message = null
            this.$dialog.confirm(
              {title: '認証の解除', body: 'Annictのトークンを削除します。'},
              {okText: '削除', cancelText: 'キャンセル'}
            ).then(e => this.updateConfig({annict: null}))
            .then(e => {
              this.result = jsyaml.dump(e.config)
              this.layout.details.annict = false
            }).catch(e => {this.message = Vue.createErrorMessage(e)})
          },
        },
      })
