doctype html
html lang='ja'
  head
    title = package.name
    meta charset='UTF-8'
    meta name='robots' content='noindex,nofollow'
    meta name='viewport' content='width=800'
    script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'
    script src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'
    script src='https://cdn.jsdelivr.net/npm/js-yaml/dist/js-yaml.min.js'
    link rel='stylesheet' href='/mulukhiya/style/default'
    link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.6.1/css/all.css'
    link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Francois+One|Inconsolata&display=swap'
  body
    == slim.render 'fragment/header'
    nav class='breadcrumbs'
      ul
        li
          a href='/' = controller.name
        li モロヘイヤHOME
    main id='app'
      == slim.render 'fragment/message'
      h1 = package.name
      ul
        - if controller.webhook?
          li
            a href='/mulukhiya/app/auth' = '{{auth_command}}'
          li v-if='username'
            a href='/mulukhiya/app/config' 環境設定
          li v-else=''
            | 環境設定
            span class='alert' 未認証
        - else
          li
            = '{{auth_command}}'
            span class='alert' 非対応
          li
            | 環境設定
            span class='alert' 非対応
        li
          a href='/mulukhiya/app/health' 動作状況
    == slim.render 'fragment/footer'
    javascript:
      new Vue({
        el: '#app',
        data: {
          message: null,
          has_error: false,
          has_token_error: false,
          auth_command: 'アプリケーションの認証',
        },
        mounted: function () {
          const token = localStorage.getItem('mulukhiya_token')
          if (token) {
            axios.get('/mulukhiya/config?token=' + encodeURIComponent(token), {responseType: 'json'})
              .then(e => {
                this.username = e.data.account.username
                this.message = 'login: @' + this.username
                this.result = jsyaml.safeDump(e.data.config)
                this.auth_command = 'アプリケーションの再認証'
              }).catch(e => {
                this.has_error = true
                document.getElementById('message-container').classList.add('alert')
              })
          } else {
            this.has_token_error = true
            this.message = 'invalid token'
          }
        },
      })
